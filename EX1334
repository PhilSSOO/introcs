//1.3.34 Ramanujan’s taxi. Srinivasa Ramanujan was an Indian
// mathematician
//        who became famous for his intuition for numbers. When
//        the English mathematician G. H. Hardy came to visit him
//        one day, Hardy remarked that the number of
//        his taxi was 1729, a rather dull number. To which
//        Ramanujan replied, “No, Hardy!
//        No, Hardy! It is a very interesting number. It is the
//        smallest number expressible as
//        the sum of two cubes in two different ways.” Verify
//        this claim by writing a program
//        that takes an integer command-line argument n and
//        prints all integers less than or
//        equal to n that can be expressed as the sum of two
//        cubes in two different ways. In
//        other words, find distinct positive integers a, b, c,
//        and d such that a3 + b3 = c3 + d3.
//        Use four nested for loops.

public class EX1334 {

    public static void main(String[] args) {
        long n = 20;
        long i3j3, k3m3;

        long start = System.nanoTime();
        for (long i = 0; i < n; i++) {
            for (long j = i+1; j < n; j++) {
                i3j3 = i*i*i + j*j*j;
                for (long k = i+1; k < n; k++) {// k = 0 leads to following duplicate; k = i+1 to avoid duplicate
                    for (long m = k+1; m < n; m++) { //
                        k3m3 = k*k*k + m*m*m;
                        if (i3j3 == k3m3 && i != k && i != m) {
                            System.out.print("a " + i + ", b " + j + ", c " + k
                                    + ", d " + m + "\n");
                                    // if k = 0, following got printed. How to avoid dulplicate???
                            //        a 1, b 12, c 9, d 10
                            //        1729
                            //        a 2, b 16, c 9, d 15
                            //        4104
                            //        a 9, b 10, c 1, d 12
                            //        1729
                            //        a 9, b 15, c 2, d 16
                             //       4104
                            System.out.println(i3j3);
                        }
                        else if (i3j3 < k3m3) // no need to check even larger k and m
                            break; // break out from innermost loop
                    }
                }
            }
        }
        long end = System.nanoTime();
        System.out.println(end-start);
    }
}
