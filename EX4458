package a44ST;
//4.4.58 Sparse vectors. A d-dimensional vector is sparse if its number
// of nonzero
//        values is small. Your goal is to represent a vector with space
//        proportional to its
//        number of nonzeros, and to be able to add two sparse vectors
//        in time proportional
//        to the total number of nonzeros. Implement a class that supports
//        the following API:
//public class SparseVector
//SparseVector() create a vector
//        void put(int i, double v) set ai to v
//        double get(int i) return ai
//        double dot(SparseVector b) vector dot product
//        SparseVector plus(SparseVector b) vector addition
//        API for a sparse vector of double values

import java.util.LinkedList;

public class EX4458a {
    private final double[] coords;
    private double[] a;
    private LinkedList<Double[]> linkedList;

    public EX4458a(double[] vComponents)
    { // Make a defensive copy to ensure immutability.
        int d = vComponents.length;
        coords = new double[d];
        a = new double[d];

        linkedList = new LinkedList<>();
        for (int i = 0; i < d; i++) {
            coords[i] = vComponents[i];
            a[i] = vComponents[i];

            if (vComponents[i] != 0) {
                linkedList.add(new Double[]{(double)i,vComponents[i]});
            }
        }
    }
    public void put(int i, double v) // set asubi to v
    {
        a[i] = v;
    }

    public double get(int i) {
        return a[i];
    }

    public double[] plus(EX4458a b) {
        double[] rr = new double[coords.length];
        LinkedList<Double[]> linkedList1 = linkedList;
        LinkedList<Double[]> linkedList2 = b.linkedList;
        int sz1 = linkedList1.size();
        int sz2 = linkedList2.size();

        double thisNonZeroIndex = 0;
        double thatNonZeroIndex = 0;
        int pp = 0;
        int p1 = 0;
        int p2 = 0;
        // may not need foll
        boolean linkedList1JustDid = false;

        while (p1 < sz1 && p2 < sz2) {
            thisNonZeroIndex = linkedList1.get(p1)[0];
            thatNonZeroIndex = linkedList2.get(p2)[0];
            if (thisNonZeroIndex == thatNonZeroIndex) {
                System.out.println(thisNonZeroIndex);
                linkedList1JustDid = true;
                pp = (int)thisNonZeroIndex;
                rr[pp] = linkedList1.get(p1)[1] + linkedList2.get(p2)[1];
                p1++;
                p2++;
            }
            else if (thisNonZeroIndex < thatNonZeroIndex) {
                pp = (int)thisNonZeroIndex;
                rr[pp] = linkedList1.get(p1)[1];
                linkedList1JustDid = true;
                p1++;
            }
            else {// thisNonZeroIndex > thatNonZeroIndex
                pp = (int)thatNonZeroIndex;
                rr[pp] = linkedList2.get(p2)[1];
                linkedList1JustDid = false;
                p2++;
            }
        }
        // we might not exhaust all items in 1 LLst, so chk it
        if (p1 <= sz1-1 && !(p2 <= sz2-1)) {
            System.out.println("101 p1 <= sz1-1 && !(p2 <= sz2-1)");
            copyRest(pp+1, p1, linkedList1, rr);
        }
        else if (!(p1 <= sz1-1) && (p2 <= sz2-1)) {
            System.out.println("105 !(p1 <= sz1-1) && (p2 <= sz2-1)");
            copyRest(pp+1, p2, linkedList2, rr);
        }
        return rr;
    }

    private void copyRest(int pp, int p,
                          LinkedList<Double[]> linkedList0, double[] rr) {
        while (p <= linkedList0.size()-1) {
            rr[pp] = linkedList0.get(p)[1];
            p++;
            pp++;
        }
    }

    private int moveToNext(double thisNonZeroIndex, int p1, LinkedList<Double[]> linkedList1,
                               double thatNonZeroIndex) {//}, int p2, LinkedList<Double[]> linkedList2) {
        while (thisNonZeroIndex < thatNonZeroIndex
                && p1 < linkedList1.size()-1) {
            p1++;
            thisNonZeroIndex = linkedList1.get(p1)[0];
        }
        return p1;
    }

    // linkedList1 store non 0 values of a sparse vector
    // elements are len = 2 int[], Integer[0] -- index
    // Integer[1] -- val
    public double dot(EX4458a b) {
        double sum = 0;
        LinkedList<Double[]> linkedList1 = linkedList;
        LinkedList<Double[]> linkedList2 = b.linkedList;
        int sz1 = linkedList1.size();
        int sz2 = linkedList2.size();

        double thisNonZeroIndex = 0;
        double thatNonZeroIndex = 0;
        int p1 = 0;
        int p2 = 0;

        while (p1 < sz1 && p2 < sz2) {
            thisNonZeroIndex = linkedList1.get(p1)[0];
            thatNonZeroIndex = linkedList2.get(p2)[0];

            if (thisNonZeroIndex < thatNonZeroIndex) {
                int p1new = moveToNext(thisNonZeroIndex, p1, linkedList1, thatNonZeroIndex);
                if (p1 != p1new)
                    p1 = p1new;
                else
                    break;
            }
            else if (thisNonZeroIndex == thatNonZeroIndex) {
                System.out.println(thisNonZeroIndex);
                sum += linkedList1.get(p1)[1]*linkedList2.get(p2)[1];
                p1++;
                p2++;
            }
            else // thisNonZeroIndex > thatNonZeroIndex
            {
                int p2new = moveToNext(thatNonZeroIndex, p2, linkedList2,
                        thisNonZeroIndex);
                if (p2 != p2new)
                    p2 = p2new;
                else
                    break;
            }
        }
        return sum;
    }

    public static void main(String[] args) {
//        LinkedList<Integer[]> linkedList1 = new LinkedList<>();
//        linkedList1.add(new Integer[]{3, 11});
//        linkedList1.add(new Integer[]{4, 11});
//        linkedList1.add(new Integer[]{7, 11});
//        linkedList1.add(new Integer[]{13, 11});
//        linkedList1.add(new Integer[]{14, 11});
//
//        LinkedList<Integer[]> linkedList2 = new LinkedList<>();
//        linkedList2.add(new Integer[]{0, 11});
//        linkedList2.add(new Integer[]{1, 11});
//        linkedList2.add(new Integer[]{2, 11});
//        linkedList2.add(new Integer[]{3, 11});
//        linkedList2.add(new Integer[]{4, 11});
//        linkedList2.add(new Integer[]{5, 11});
//        linkedList2.add(new Integer[]{8, 11});
//        linkedList2.add(new Integer[]{13, 11});
//        EX4458a ex1 = new EX4458a(new double[]{0,1.1,3.3,0,0,  2.2,0,4.4,0,      0});
//        EX4458a ex2 = new EX4458a(new double[]{0,0,  3.3,0,0,  2.2,0,4.4,0.1,    7});
        EX4458a ex1 = new EX4458a(new double[]{0, 1,  0,  0, 0,  0,   5,   0,  11,  22});
        EX4458a ex2 = new EX4458a(new double[]{0, 0,  3,  4, 0,  6,   0,   8,   7,  33});

        double[] dd = ex1.plus(ex2);
        System.out.println(dd);

        double sum = ex1.dot(ex2);
        System.out.println(sum);
    }
}

