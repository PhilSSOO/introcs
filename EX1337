//1.3.37 2D random walk. A two-dimensional random walk simulates
// the behavior
//        of a particle moving in a grid of points. At each step,
//        the random walker moves
//        north, south, east, or west with probability equal to 1/4,
//        independent of previous
//        moves. Write a program RandomWalker that takes an integer
//        command-line argument n and estimates how long it will
//        take a random walker to hit the boundary of
//        a 2n-by-2n square centered at the starting point.

import edu.princeton.cs.algs4.StdRandom;

public class EX1337 {
    public static int RandomWalker(int n) {
        int x = n;
        int y = n;
        double rr;
        int cnt = 0;

        while (x != 0 && x != 2*n && y != 0 && y != 2*n) {
            rr = StdRandom.uniform();
            // up
            if (rr < .25) {
                y++;
            }
            // dn
            else if (rr < .5) {
                y--;
            }
            // lft
            else if (rr < .75) {
                x--;
            }
            // rgt
            else {
                x++;
            }
            cnt++;
        }
        System.out.println(cnt);
        return cnt;
    }

    public static void main(String[] args) {
        int n = 10;
        RandomWalker(n);
    }
}
