
//3.3.13 Override the equals() and hashCode() methods for Vector
// (program
//        3.3.3) so that two Vector objects are equal if they have
//        the same length and the
//        corresponding coordinates are equal

import java.util.Objects;

public class EX3313 {
    public static void main(String[] args) {
        Vector vv = new Vector(new double[]{0,1,2});
        Vector vv1 = new Vector(new double[]{0,1,2});

        System.out.println(vv.hashCode());
        System.out.println(vv1.hashCode());
        System.out.println(vv1.equals(vv));
    }
}

class Vector
{
    private final double[] coords;
    public Vector(double[] a)
    { // Make a defensive copy to ensure immutability.
        coords = new double[a.length];
        for (int i = 0; i < a.length; i++)
            coords[i] = a[i];
    }

    public boolean equals(Vector that)
    {
        for (int i = 0; i < coords.length; i++) {
            if (coords[i] != that.coords[i])
                return false;
        }
        return true;
    }

    public int hashCode()
    {
        return Objects.hash(coords[0], coords[1], coords[2]);
    }

    public Vector plus(Vector that)
    { // Sum of this vector and that.
        double[] result = new double[coords.length];
        for (int i = 0; i < coords.length; i++)
            result[i] = this.coords[i] + that.coords[i];
        return new Vector(result);
    }
    
    public Vector scale(double alpha)
    { // Scale this vector by alpha.
        double[] result = new double[coords.length];
        for (int i = 0; i < coords.length; i++)
            result[i] = alpha * coords[i];
        return new Vector(result);
    }
    
    public double dot(Vector that)
    { // Dot product of this vector and that.
        double sum = 0.0;
        for (int i = 0; i < coords.length; i++)
            sum += this.coords[i] * that.coords[i];
        return sum;
    }
    
    public double magnitude()
    { return Math.sqrt(this.dot(this)); }
    
    public Vector direction()
    { return this.scale(1/this.magnitude()); }
    
    public double cartesian(int i)
    { return coords[i]; }
}
