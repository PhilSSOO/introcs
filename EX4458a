package a44ST;
//4.4.58 Sparse vectors. A d-dimensional vector is sparse if its number
// of nonzero
//        values is small. Your goal is to represent a vector with space
//        proportional to its
//        number of nonzeros, and to be able to add two sparse vectors
//        in time proportional
//        to the total number of nonzeros. Implement a class that supports
//        the following API:
//public class SparseVector
//SparseVector() create a vector
//        void put(int i, double v) set ai to v
//        double get(int i) return ai
//        double dot(SparseVector b) vector dot product
//        SparseVector plus(SparseVector b) vector addition
//        API for a sparse vector of double values

import java.util.LinkedList;

public class EX4458a {

    public void put(int i, double v) // set asubi to v
    {

    }

    // thisNonZeroIndex < thatNonZeroIndex
    private int[] dealwithllst(int thisNonZeroIndex, int p1, LinkedList<Integer[]> linkedList1,
                               int thatNonZeroIndex, int p2, LinkedList<Integer[]> linkedList2) {
        // mv linkedList11
        while (thisNonZeroIndex < thatNonZeroIndex
                && p1 < linkedList1.size()-1) {
            p1++;
           // System.out.println("p1 = " + p1);
            thisNonZeroIndex = linkedList1.get(p1)[0];
        }
        return new int[]{p1,p2};
    }

    public int product(LinkedList<Integer[]> linkedList1,
                     LinkedList<Integer[]> linkedList2) {
        int sum = 0;
        int sz1 = linkedList1.size();
        int sz2 = linkedList2.size();
        int thisNonZeroIndex = 0;
        int thatNonZeroIndex = 0;
        int p1 = 0;
        System.out.println("p1 = " + p1);
        int p2 = 0;
        System.out.println("p2 = " + p2);
        int[] p1p2 = new int[2];

        while (p1 < sz1 && p2 < sz2) {
            thisNonZeroIndex = linkedList1.get(p1)[0];
            thatNonZeroIndex = linkedList2.get(p2)[0];
            if (thisNonZeroIndex == thatNonZeroIndex) {
                System.out.println(thisNonZeroIndex);
                sum += linkedList1.get(p1)[1]*linkedList2.get(p2)[1];
                p1++;
             //   System.out.println("p1 = " + p1);
                p2++;
             //   System.out.println("p2 = " + p2);
            }
            else {
                if (thisNonZeroIndex < thatNonZeroIndex) {
                    p1p2 = dealwithllst(thisNonZeroIndex, p1, linkedList1,
                            thatNonZeroIndex, p2, linkedList2);
                    if (p1p2 != null) {
                        p1 = p1p2[0];
                        System.out.println("p1 = " + p1);
                        p2 = p1p2[1];
                        System.out.println("p2 = " + p2);
                    }
                    else
                        break;
                }

                else // thisNonZeroIndex > thatNonZeroIndex
                {
                    p1p2 = dealwithllst(thatNonZeroIndex, p2, linkedList2,
                            thisNonZeroIndex, p1, linkedList1);
                    if (p1p2 != null) {
                        p2 = p1p2[0];
                        System.out.println("p2 = " + p2);
                        p1 = p1p2[1];
                        System.out.println("p1 = " + p1);
                    }
                    else
                        break;
                }
            }

        }
        return sum;
    }

    public static void main(String[] args) {
        LinkedList<Integer[]> linkedList1 = new LinkedList<>();
        linkedList1.add(new Integer[]{0, 1});
        linkedList1.add(new Integer[]{4, 11});
        linkedList1.add(new Integer[]{7, 11});
        linkedList1.add(new Integer[]{13, 11});
        linkedList1.add(new Integer[]{14, 11});

        LinkedList<Integer[]> linkedList2 = new LinkedList<>();
        linkedList2.add(new Integer[]{0, 1});
        linkedList2.add(new Integer[]{1, 11});
        linkedList2.add(new Integer[]{2, 11});
        linkedList2.add(new Integer[]{3, 11});
        linkedList2.add(new Integer[]{4, 11});
        linkedList2.add(new Integer[]{5, 11});
        linkedList2.add(new Integer[]{8, 11});
        linkedList2.add(new Integer[]{13, 11});
        EX4458a ex4458a = new EX4458a();
        int dd = ex4458a.product(linkedList1, linkedList2);
        System.out.println(dd);
    }
}

