//1.3.40 Experimental analysis. Run experiments to determine the
// relative costs of
//        Math.exp() and the methods from exercise 1.3.38 for
//        computing e x: the direct
//        method with nested for loops, the improvement with a
//        single for loop, and the
//        latter with the loop-continuation condition (term > 0).
//        Use trial-and-error with
//        a command-line argument to determine how many times
//        your computer can perform each computation in 10 seconds

public class EX1340 {
    // the direct method with nested for loops,
    public static double nestedLoops(double x, int n) {
        double term = 1.0;
        double sum = term;
        for (int i = 1; i < n; i++) // sum != sum + term
        {
            double numerator = 1.0, denominator = 1.0; // x,
            for (int j = 1; j <= i; j++) numerator *= x;
            for (int k = 1; k <= i; k++) {
                denominator *= i;
              //  System.out.println("denominator " + denominator);
            }

            term = numerator/denominator;
          //  System.out.println(term);
            sum += term;
        }
        return sum;
    }
    // the improvement with a single for loop,
    public static double singleLoop(double x) {// , int n
        double term = 1.0;
        double sum = 0.0;
        for (int i = 1; sum != sum + term; i++)
        {
            sum += term;
            term *= x/i;
        }
        return sum;
    }

    // and the latter with the loop-continuation condition (term > 0)
    public static double loopCont(double x) {// , int n
        double term = 1.0;
        double sum = 0.0;
        for (int i = 1; term > 0; i++)
        {
            sum += term;
            term *= x/i;
        }
        return sum;
    }

    public static void main(String[] args) {
        int n = 21;
        double x = 1;
        double sum = nestedLoops(x, n);
        System.out.println(sum);

        double sum1 = singleLoop(x);
        System.out.println(sum1);

        double sum2 = loopCont(x);
        System.out.println(sum2);
    }
 }
