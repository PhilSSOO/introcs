//1.4.23 Longest plateau. Given an array of integers, find the length
// and location
//        of the longest contiguous sequence of equal values for which
//        the values of the elements just before and just after
//        this sequence are smaller.
public class EX1423 {
    public static boolean found = false;
    public static void wrapp(int[] aa) {
        // build an int[] of len 2 to store len and loc
        int[] plateau = new int[]{-1,-1};
        longest(aa, plateau);
    }
    // print plateau's len and loc
    private static void longest(int[] aa, int[] plateau) {
        // start from j = 2 to make sure we find a plateau candidate
        for (int j = 2; j < aa.length; j++) {
            if (aa[j] == aa[j-1] && aa[j-1] > aa[j-2]) {
                plateau = findValAndLen(aa, plateau, j-1);
                // when we get here, either new plateau was found or not
                if (found) {
                    //update j by skipping the whole plateau len
                    j += plateau[0];
                    found = false;
                }
            }
        }
        System.out.println("plateau len " + plateau[0]);
        System.out.println("plateau loc " + plateau[1]);
    }

    private static int[] findValAndLen(int[] aa, int[] plateau,
                                       int start) {  // if a plateau was found, start is the plateau' 2nd item's index
        int val = aa[start];
        // endIndex is the first index after the flat segment
        // the flat could or could not be a plateau
        int endIndex;
        // aa[start + 1] == aa[start] for sure, so we chk from start + 2
        for (endIndex = start + 2; endIndex < aa.length; endIndex++) {
            if (aa[endIndex] != val)
                break;
        }
        // found a sequence of equal vals. Need to chk if the item after is < val
        if (aa[endIndex] < aa[endIndex-1] && endIndex-start > plateau[0]) {
            found = true;
            plateau[0] = endIndex-start;
            plateau[1] = start;
            return plateau;
        }
        return plateau;
    }

    public static void main(String[] args) {
        int[] aa = new int[] {2,2,2,2,1,3,3,4,5,5,5,5,2,8};
        wrapp(aa);
    }
}
