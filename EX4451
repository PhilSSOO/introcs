package a44ST;

//4.4.51  Multiple word search. Write a program that takes k words from the
// command line, reads in a sequence of words from standard input, and
// identifies the
//        smallest interval of text that contains all of the k words (not
//        necessarily in the same
//        order). You do not need to consider partial words

import edu.princeton.cs.algs4.StdIn;

import java.util.ArrayList;
import java.util.List;

public class EX4451 {

}

//Program 4.4.4 Binary search tree
class BSTBST<Key extends Comparable<Key>, Value>
{
    private Node root;
    private class Node
    {
        Key key;
        int val;
        Node left, right;
        Node(Key key)
        { this.key = key; this.val = 1; }
    }

    public int get(Key key)
    { return get(root, key); }
    private int get(Node x, Key key)
    {
        if (x == null) return 0;
        int cmp = key.compareTo(x.key);
        if (cmp < 0) return get(x.left, key);
        else if (cmp > 0) return get(x.right, key);
        else return x.val;
    }
    public void put(Key key)
    { root = put(root, key); }
    private Node put(Node x, Key key)
    {
        if (x == null) return new Node(key);
        int cmp = key.compareTo(x.key);
        if (cmp < 0) x.left = put(x.left, key);
        else if (cmp > 0) x.right = put(x.right, key);
        else x.val++;
        return x;
    }

    public int wdAmongQuery(Key wd,Key[] query) {
        for (int i = 0; i < query.length; i++) {
            if (wd.equals(query[i]))
                return i;
        }
        return -1;
    }

    public int endOfsmlInterval(int startIndex,
                                List<Key> list,Key[] query,
                                boolean[] queryFound) {
        int numFound = 0;
        for (int i = startIndex; i < list.size(); i++) {
            Key word = list.get(i);
            int dd = wdAmongQuery(word,query);
            if (dd >= 0 && queryFound[dd] == false) {
                queryFound[dd] = true;
                numFound++;
                if (numFound == query.length) {
                    return i;
                }
            }
        }
        return -1;
    }

    // 3 aa bb cc         qq ww ee aa rr cc cc tt gg bb bb
    public static void main(String[] args) {
        BSTBST bstbst = new BSTBST();
        int k = StdIn.readInt();
        String[] query = new String[k];
        for (int i = 0; i < k; i++) {
            query[i] = StdIn.readString();
        }
        boolean[] queryFound = new boolean[query.length];
        // use a list to store seq of words
        List<String> list = new ArrayList();

        while (!StdIn.isEmpty()) {
            String word = StdIn.readString();
            list.add(word);
            bstbst.put(word);
        }
        int start = 0;
        int end = 0;
        int sm = Integer.MAX_VALUE;

        for (int i = 0; i < list.size(); i++) {
            queryFound = new boolean[query.length];
            int dd = bstbst.endOfsmlInterval(i,list,query,queryFound);

            if (dd > 0) {
                int len = dd-i+1;
                if (len < sm) {
                    sm = len;
                    start = i;
                    end = dd;
                }
            }
        }
        System.out.println("smallest interval is from " + start + " to " + end);
    }
}
