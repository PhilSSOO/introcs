//4.4.4 Modify Index to make a program IndexLines that considers only
// consecutive sequences of letters as keys (no punctuation or numbers)
// and uses line number
//        instead of word position as the value. This functionality is
//        useful for programs, as
//        follows:
//        % java IndexLines 6 0 < Index.java
//        continue 12
//        enqueue 15
//        Integer 4 5 7 8 14
//        parseInt 4 5
//        println 22

import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.Queue;
import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;

public class EX444 {

}

//Program 4.4.2 Indexing
class IndexLines
{
    private static int nextNonCharIndex(String ss, int xx) {
        int i;
        for (i = xx; i < ss.length(); i++) {
            if (!(ss.charAt(i) >= 'a' && ss.charAt(i) <= 'z')) {
                break;
            }
        }
        return i;
    }

    private static int nextCharIndex(String ss, int xx) {
        int i;
        for (i = xx; i < ss.length(); i++) {
            if (ss.charAt(i) >= 'a' && ss.charAt(i) <= 'z') {
                break;
            }
        }
        return i;
    }

    public static void main(String[] args)
    {
        In in = new In("C:.....java");
// Create and initialize the symbol table.
        ST<String, Queue<Integer>> st;
        st = new ST<String, Queue<Integer>>();
        String[] allLines = in.readAllLines();

        for (int linecnt = 0; linecnt < allLines.length; linecnt++)
        { //
            String ss = allLines[linecnt].toLowerCase();
            int nxtCharIndex = nextCharIndex(ss,0);
            while (nxtCharIndex < ss.length()) {
                int next = nextNonCharIndex(ss, nxtCharIndex);
                String temp = ss.substring(nxtCharIndex, next);
                if (!st.contains(temp))
                    st.put(temp, new Queue<>());
                st.get(temp).enqueue(linecnt);
                nxtCharIndex = nextCharIndex(ss,next);
            }
        }

        for (String s : st)
        {
            Queue<Integer> queue = st.get(s);
            StdOut.println(s + ": " + queue);
        }
    }
}
