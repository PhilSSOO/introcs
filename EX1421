//1.4.21 Modify SelfAvoidingWalk to calculate and print the average
// area of the
//        smallest axis-aligned rectangle that encloses the
//        dead-end paths.
public class EX1421 {
    public static void main(String[] args) {
        // Do trials random self-avoiding
        // walks in an n-by-n lattice.
        int n = 25; // Integer.parseInt(args[0]);
        int trials = 10000; // Integer.parseInt(args[1]);
        int totalArea = 0;

        for (int t = 0; t < trials; t++) {
            boolean[][] a = new boolean[n][n];
            // start frm centr
            int x = n/2, y = n/2;
            while (x > 0 && x < n-1 && y > 0 && y < n-1)
            { // Check for dead end and make a random move.
                a[x][y] = true;
                if (a[x-1][y] && a[x+1][y] && a[x][y-1] && a[x][y+1])
                {
                    totalArea += Math.abs((x-n/2)*(y-n/2));
                    break;
                }
                double r = Math.random();
                if (r < 0.25) { if (!a[x+1][y]) x++; }
                else if (r < 0.50) { if (!a[x-1][y]) x--; }
                else if (r < 0.75) { if (!a[x][y+1]) y++; }
                else if (r < 1.00) { if (!a[x][y-1]) y--; }
            }
        }
        System.out.println((double)totalArea/trials + " avg area");
    }
}
